/*
Script: Curl.jx
	Class to handle Curl Requests.

License:
	MIT-style license.

Acknowledgements:
	Part of code for Curl::response() lifted from the official v8cgi
	HTTP.ClientResponse library, Copyrighted 2009, Ondrej Zara.
*/

include('process');

var Curl = new Class({

	Implements: Options,

	options: {
		headers: {
			'Connection': 'close',
			'Accept-Charset':'utf-8',
			'Accept-Encoding':'identity'
		}
	},

	initialize: function(options){
		this.setOptions(options);
		this.headers = Object.append({}, this.options.headers);
	},

	setHeader: function(key, value){
		this.headers[key] = value;
		return this;
	},

	setHeaders: function(headers){
		this.headers = Object.append(this.headers, headers);
		return this;
	},

	request: function(url, method, data){
		var buff = ['curl', '-si'];

		method = method.toUpperCase();
		buff.push('-X ' + method);

		data = data || '';
		if (({'PUT': 1, 'POST': 1})[method] && data) {
			buff.push('-H "Content-Length: ' + data.length + '"');
			buff.push('-H "Content-Type: application/x-www-form-urlencoded; charset=utf-8"');
			buff.push('-d "' + data.replace(/"/g, '\\"') +'"')
		}

		for (var key in this.headers) buff.push('-H "' + key + ': ' + this.headers[key] + '"');
		buff.push('"' + url + '"');

		var cmd = buff.join(" ");
		var result = new Process().exec(cmd);
		return this.response(result);
	},

	GET: function(uri, data){
		return this.request(uri, 'GET', data);
	},

	POST: function(uri, data){
		return this.request(uri, 'POST', data);
	},

	PUT: function(uri, data){
		return this.request(uri, 'PUT', data);
	},

	DELETE: function(uri, data){
		return this.request(uri, 'DELETE', data);
	},

	'protected response': function(data){
		var index = data.indexOf('\r\n\r\n');
		var body = data.substring(index+4);
		var h = data.substring(0, index);
		var arr = h.split('\r\n');

		var parts = arr.shift().match(/^ *http\/[^ ]+ *([0-9]+) *(.*)$/i);
		var status = parseInt(parts[1], 10);

		var headers = {};
		for (var i=0;i<arr.length;i++) {
			var parts = arr[i].match(/^ *([^: ]+) *: *(.*)$/);
			if (parts) {
				headers[parts[1].capitalize()] = parts[2];
			}
		}
		var data = body;
		return {
			status: status,
			headers: headers,
			body: data
		};
	}

});

exports.Curl = Curl;