/*
Script: CouchDB.jx
	A Simple CouchDB REST client.

License:
	MIT-style license.
*/


include('./Curl.jx');
include('./HTTPCurl.jx');
(function(){
var CouchDB = this.CouchDB = new Class({

	Implements: Options,

	options: {
		host: 'http://127.0.0.1',
		port: '5984',
		db: '',
		username: '',
		password: ''
	},
	hostURL: '',
	dbURL: '',
	curl: null,
	cache: null,
	initialize: function(options){
		this.setOptions(options);
		this.options.host = this.options.host.rtrim('/');
		this.hostURL = (this.options.port) ? [this.options.host, this.options.port].join(':') : this.options.host;
		this.dbURL = [this.hostURL, this.options.db].join('/') + '/';
		this.curl = new (Process ? Curl : HTTPCurl)();
		this.cache = (Raccoon.Cache.get('couchdb.cache'))? true : false; 
		if(this.options.noCache) this.cache =false;
		if (this.options.username && this.options.password) {
			var auth = Util.base64encode([this.options.username, this.options.password].join(':'));
			this.curl.setHeader('Authorization', 'Basic ' + auth);
		}
	},

	rawRequest: function(method, url, data){
		data = (data) ? JSON.encode(data) : '';
		var resp = this.curl.request(url, method, data);
		if (resp.body) {
			resp.body = JSON.decode(resp.body);
		}
		return resp;
	},

	request: function(method, url, args, data){
		url = this.dbURL + this.buildQuery(url, args);
		return this.rawRequest(method, url, data);
	},

	dbRequest: function(method, url, args, data){
		url = [this.hostURL, '/', this.buildQuery(url, args)].join('');
		return this.rawRequest(method, url, data);
	},

	buildQuery: function(url, args){
		var buff = [];
		for (var key in args) {
			var value = (({'key':1, 'startkey':1, 'endkey':1})[key]
						 || args[key] == true) ? JSON.encode(args[key]) : args[key];
			buff.push([encodeURIComponent(key), '=', encodeURIComponent(value)].join(''));
		};
		return (buff.length > 0) ? [url, '?', buff.join('&')].join('') : url;
	},

	GET: function(url, args, data){
		return this.request('GET', url, args, data);
	},

	POST: function(url, args, data){
		return this.request('POST', url, args, data);
	},

	PUT: function(url, args, data){
		return this.request('PUT', url, args, data);
	},

	DELETE: function(url, args, data){
		return this.request('DELETE', url, args, data);
	},
	uuids: function(count) {
		return this.dbRequest('GET','_uuids',{'count':(count)?count:20});
	},
	view: function(design, view, args){
		// Commented out items: For cleanup.
		if(this.cache) {
			var cache = Raccoon.Cache;
			var value = Object.values(args);
			value = String.from(value).replace(/[^0-9A-Za-z]/g,'_');
			var match = [design,view,value].join('_')+".json";
			var x = cache.get(match);
			var item = [cache.get('dir'),match].join('');
			if(cache.check(item)){
			var url = ['_design/', design, '/_view/', view].join('');
			var resp = this.request('GET', url, args);
			var retval = cache.File(item,"w",JSON.encode(resp.body),true,false);
			return retval;
			} else {
			var retval = cache.File(item,"r",false,false,false);
			return retval;
			}
		} else {
			var url = ['_design/', design, '/_view/', view].join('');
			return this.request('GET', url, args);
		}
	}

});

this.CouchDoc = new Class({
	initialize:function(json) {
		this.set('new',false);
		this.set('editable',{users:["info@mootooled.net"],groups:["admin"]});
		if(typeOf(json) != false) {
			this.sets(json);
		}
		return this;
	},
	get:function(key) {
		return (this[key])?this[key]:null;
	},
	getKeys:function() {
		return Object.keys(this);
	},
	getValues:function() {
		return Object.values(this);
	},
	erase:function(key) {
		if(Object.keys(this).contains(key)) delete key;
		return this;
	},
	getObj:function() {
		var newDoc = Object.from(this.getKeys(),this.getValues());
		if(newDoc.caller) delete newDoc.caller;
		return newDoc;
	},
	toJson:function() {
		return JSON.encode(this);
	},
	set:function(key,value) {
		this[key] = value;
		return this;
	},
	save:function() {
		if(!this.get('url')) return false;
		var conn = Raccoon.CouchDB;
		var newDoc = this.getObj();
		var id = newDoc._id;
		var rev = newDoc._rev;
		if(newDoc.caller) delete newDoc.caller;
		//delete newDoc._rev;
		//return response.write(JSON.encode(newDoc));
		//conn.curl.setHeader("Content-Type","application/x-www-form-urlencoded; charset=utf-8");
		try {
		var req = conn.request('PUT',String.from(id),false,newDoc);
		//return req.body;
		} catch(err) {
		return JSON.encode({'error':err});
		}
		var result = Object.keys(req.body);
		//return req.body;
		if(result.contains("ok")) { this.set('_rev',String.from(req.body.rev)); return JSON.encode(this); }
		else if(result.contains("error")) { return JSON.encode(req.body); }
		else return false;
	},
	sets:function(obj) {
		switch(typeOf(obj)) {
			case "array":
			obj.each(function(value,key) {
			this.set(key,value);
			});
			break;
			case "object":
			try {
				for (var key in obj) {
					this.set(key, obj[key]);
				}
			} catch(err) { return response.write(JSON.encode(err)); }
			break;
			case "string":default:
			var decobj = JSON.decode(obj);
			if(decobj) this.sets(decobj);
			else this.set('rawstring',obj);
			break;
		}
	return this;
	}
});

})();