/*
Script: Extras.jx
	MooTools extensions and other useful functions.

License:
	MIT-style license.
*/

(function(){

this.echo = function(){
	response.write.apply(response, arguments);
};

String.implement({

	echo: function(){
		response.write(this);
	},

	rtrim: function(str) {
		if (this.lastIndexOf(str) == this.length - 1) return this.substring(0, this.lastIndexOf(str));
		return this;
	},

	parsePath: function(){
		return this.replace(/(\{appDir\})/, system.getcwd()).rtrim('/') + '/';
	},

	stripSlashes: function(){
		return this.replace(/\\'/g, "'");
	},
	escape: function() {
		return this.replace(/\&/g,"&amp;").replace(/\</g,"&lt;").replace(/\>/g,"&gt;").replace(/\"/g,"&quot;").replace(/\'/g,"&apos;");
	},
	unescape: function() {
		return this.replace(/&apos;/g,"'").replace(/&quot;/g,"\"").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/&amp;/g,"&");
	}
});

Table.implement({

	sets: function(obj){
		for (var key in obj) this.set(key, obj[key]);
	}

});

this.Assets = new Class({

	assets: {},
	scripts: '',
	styles: '',

	loadAssets: function(){
		if (this.assets.scripts) this.script(this.assets.scripts);
		if (this.assets.styles) this.style(this.assets.styles);
		delete this.assets;
	},

	script: function(items){
		items = Array.from(items);
		for (var x = 0, y = items.length; x < y; x++) {
			this.scripts += '<script src="/assets/scripts/'+ items[x] +'.js" type="text/javascript"></script>\n';
		}
	},

	style: function(items){
		items = Array.from(items);
		for (var x = 0, y = items.length; x < y; x++) {
			this.styles += '<link rel="stylesheet" href="/assets/styles/'+ items[x] +'.css" type="text/css" />\n';
		}
	}

});

})();

